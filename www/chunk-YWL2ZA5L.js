import{R as f,e as d,f as P,j as w}from"./chunk-BIQBJZDS.js";import{a as b}from"./chunk-XR2CIPKH.js";import{f as s}from"./chunk-RW4GY4BD.js";var h=class{constructor(e){this.sqlite=e,this._connectionDict=new Map}initWebStore(){return s(this,null,function*(){try{return yield this.sqlite.initWebStore(),Promise.resolve()}catch(e){return Promise.reject(e)}})}saveToStore(e){return s(this,null,function*(){try{return yield this.sqlite.saveToStore({database:e}),Promise.resolve()}catch(t){return Promise.reject(t)}})}saveToLocalDisk(e){return s(this,null,function*(){try{return yield this.sqlite.saveToLocalDisk({database:e}),Promise.resolve()}catch(t){return Promise.reject(t)}})}getFromLocalDiskToStore(e){return s(this,null,function*(){let t=e!=null?e:!0;try{return yield this.sqlite.getFromLocalDiskToStore({overwrite:t}),Promise.resolve()}catch(r){return Promise.reject(r)}})}echo(e){return s(this,null,function*(){try{let t=yield this.sqlite.echo({value:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}})}isSecretStored(){return s(this,null,function*(){try{let e=yield this.sqlite.isSecretStored();return Promise.resolve(e)}catch(e){return Promise.reject(e)}})}setEncryptionSecret(e){return s(this,null,function*(){try{return yield this.sqlite.setEncryptionSecret({passphrase:e}),Promise.resolve()}catch(t){return Promise.reject(t)}})}changeEncryptionSecret(e,t){return s(this,null,function*(){try{return yield this.sqlite.changeEncryptionSecret({passphrase:e,oldpassphrase:t}),Promise.resolve()}catch(r){return Promise.reject(r)}})}clearEncryptionSecret(){return s(this,null,function*(){try{return yield this.sqlite.clearEncryptionSecret(),Promise.resolve()}catch(e){return Promise.reject(e)}})}checkEncryptionSecret(e){return s(this,null,function*(){try{let t=yield this.sqlite.checkEncryptionSecret({passphrase:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}})}addUpgradeStatement(e,t){return s(this,null,function*(){try{return e.endsWith(".db")&&(e=e.slice(0,-3)),yield this.sqlite.addUpgradeStatement({database:e,upgrade:t}),Promise.resolve()}catch(r){return Promise.reject(r)}})}createConnection(e,t,r,i,n){return s(this,null,function*(){try{e.endsWith(".db")&&(e=e.slice(0,-3)),yield this.sqlite.createConnection({database:e,encrypted:t,mode:r,version:i,readonly:n});let o=new u(e,n,this.sqlite),a=n?`RO_${e}`:`RW_${e}`;return this._connectionDict.set(a,o),Promise.resolve(o)}catch(o){return Promise.reject(o)}})}closeConnection(e,t){return s(this,null,function*(){try{e.endsWith(".db")&&(e=e.slice(0,-3)),yield this.sqlite.closeConnection({database:e,readonly:t});let r=t?`RO_${e}`:`RW_${e}`;return this._connectionDict.delete(r),Promise.resolve()}catch(r){return Promise.reject(r)}})}isConnection(e,t){return s(this,null,function*(){let r={};e.endsWith(".db")&&(e=e.slice(0,-3));let i=t?`RO_${e}`:`RW_${e}`;return r.result=this._connectionDict.has(i),Promise.resolve(r)})}retrieveConnection(e,t){return s(this,null,function*(){e.endsWith(".db")&&(e=e.slice(0,-3));let r=t?`RO_${e}`:`RW_${e}`;if(this._connectionDict.has(r)){let i=this._connectionDict.get(r);return typeof i<"u"?Promise.resolve(i):Promise.reject(`Connection ${e} is undefined`)}else return Promise.reject(`Connection ${e} does not exist`)})}getNCDatabasePath(e,t){return s(this,null,function*(){try{let r=yield this.sqlite.getNCDatabasePath({path:e,database:t});return Promise.resolve(r)}catch(r){return Promise.reject(r)}})}createNCConnection(e,t){return s(this,null,function*(){try{yield this.sqlite.createNCConnection({databasePath:e,version:t});let r=new u(e,!0,this.sqlite),i=`RO_${e})`;return this._connectionDict.set(i,r),Promise.resolve(r)}catch(r){return Promise.reject(r)}})}closeNCConnection(e){return s(this,null,function*(){try{yield this.sqlite.closeNCConnection({databasePath:e});let t=`RO_${e})`;return this._connectionDict.delete(t),Promise.resolve()}catch(t){return Promise.reject(t)}})}isNCConnection(e){return s(this,null,function*(){let t={},r=`RO_${e})`;return t.result=this._connectionDict.has(r),Promise.resolve(t)})}retrieveNCConnection(e){return s(this,null,function*(){if(this._connectionDict.has(e)){let t=`RO_${e})`,r=this._connectionDict.get(t);return typeof r<"u"?Promise.resolve(r):Promise.reject(`Connection ${e} is undefined`)}else return Promise.reject(`Connection ${e} does not exist`)})}isNCDatabase(e){return s(this,null,function*(){try{let t=yield this.sqlite.isNCDatabase({databasePath:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}})}retrieveAllConnections(){return s(this,null,function*(){return this._connectionDict})}closeAllConnections(){return s(this,null,function*(){let e=new Map;try{for(let t of this._connectionDict.keys()){let r=t.substring(3),i=t.substring(0,3)==="RO_";yield this.sqlite.closeConnection({database:r,readonly:i}),e.set(t,null)}for(let t of e.keys())this._connectionDict.delete(t);return Promise.resolve()}catch(t){return Promise.reject(t)}})}checkConnectionsConsistency(){return s(this,null,function*(){try{let e=[...this._connectionDict.keys()],t=[],r=[];for(let n of e)t.push(n.substring(0,2)),r.push(n.substring(3));let i=yield this.sqlite.checkConnectionsConsistency({dbNames:r,openModes:t});return i.result||(this._connectionDict=new Map),Promise.resolve(i)}catch(e){return this._connectionDict=new Map,Promise.reject(e)}})}importFromJson(e){return s(this,null,function*(){try{let t=yield this.sqlite.importFromJson({jsonstring:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}})}isJsonValid(e){return s(this,null,function*(){try{let t=yield this.sqlite.isJsonValid({jsonstring:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}})}copyFromAssets(e){return s(this,null,function*(){let t=e!=null?e:!0;try{return yield this.sqlite.copyFromAssets({overwrite:t}),Promise.resolve()}catch(r){return Promise.reject(r)}})}getFromHTTPRequest(e,t){return s(this,null,function*(){let r=t!=null?t:!0;try{return yield this.sqlite.getFromHTTPRequest({url:e,overwrite:r}),Promise.resolve()}catch(i){return Promise.reject(i)}})}isDatabaseEncrypted(e){return s(this,null,function*(){e.endsWith(".db")&&(e=e.slice(0,-3));try{let t=yield this.sqlite.isDatabaseEncrypted({database:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}})}isInConfigEncryption(){return s(this,null,function*(){try{let e=yield this.sqlite.isInConfigEncryption();return Promise.resolve(e)}catch(e){return Promise.reject(e)}})}isInConfigBiometricAuth(){return s(this,null,function*(){try{let e=yield this.sqlite.isInConfigBiometricAuth();return Promise.resolve(e)}catch(e){return Promise.reject(e)}})}isDatabase(e){return s(this,null,function*(){e.endsWith(".db")&&(e=e.slice(0,-3));try{let t=yield this.sqlite.isDatabase({database:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}})}getDatabaseList(){return s(this,null,function*(){try{let t=(yield this.sqlite.getDatabaseList()).values;t.sort();let r={values:t};return Promise.resolve(r)}catch(e){return Promise.reject(e)}})}getMigratableDbList(e){return s(this,null,function*(){let t=e||"default";try{let r=yield this.sqlite.getMigratableDbList({folderPath:t});return Promise.resolve(r)}catch(r){return Promise.reject(r)}})}addSQLiteSuffix(e,t){return s(this,null,function*(){let r=e||"default",i=t||[];try{let n=yield this.sqlite.addSQLiteSuffix({folderPath:r,dbNameList:i});return Promise.resolve(n)}catch(n){return Promise.reject(n)}})}deleteOldDatabases(e,t){return s(this,null,function*(){let r=e||"default",i=t||[];try{let n=yield this.sqlite.deleteOldDatabases({folderPath:r,dbNameList:i});return Promise.resolve(n)}catch(n){return Promise.reject(n)}})}moveDatabasesAndAddSuffix(e,t){return s(this,null,function*(){let r=e||"default",i=t||[];return this.sqlite.moveDatabasesAndAddSuffix({folderPath:r,dbNameList:i})})}},u=class{constructor(e,t,r){this.dbName=e,this.readonly=t,this.sqlite=r}getConnectionDBName(){return this.dbName}getConnectionReadOnly(){return this.readonly}open(){return s(this,null,function*(){try{return yield this.sqlite.open({database:this.dbName,readonly:this.readonly}),Promise.resolve()}catch(e){return Promise.reject(e)}})}close(){return s(this,null,function*(){try{return yield this.sqlite.close({database:this.dbName,readonly:this.readonly}),Promise.resolve()}catch(e){return Promise.reject(e)}})}beginTransaction(){return s(this,null,function*(){try{let e=yield this.sqlite.beginTransaction({database:this.dbName});return Promise.resolve(e)}catch(e){return Promise.reject(e)}})}commitTransaction(){return s(this,null,function*(){try{let e=yield this.sqlite.commitTransaction({database:this.dbName});return Promise.resolve(e)}catch(e){return Promise.reject(e)}})}rollbackTransaction(){return s(this,null,function*(){try{let e=yield this.sqlite.rollbackTransaction({database:this.dbName});return Promise.resolve(e)}catch(e){return Promise.reject(e)}})}isTransactionActive(){return s(this,null,function*(){try{let e=yield this.sqlite.isTransactionActive({database:this.dbName});return Promise.resolve(e)}catch(e){return Promise.reject(e)}})}loadExtension(e){return s(this,null,function*(){try{return yield this.sqlite.loadExtension({database:this.dbName,path:e,readonly:this.readonly}),Promise.resolve()}catch(t){return Promise.reject(t)}})}enableLoadExtension(e){return s(this,null,function*(){try{return yield this.sqlite.enableLoadExtension({database:this.dbName,toggle:e,readonly:this.readonly}),Promise.resolve()}catch(t){return Promise.reject(t)}})}getUrl(){return s(this,null,function*(){try{let e=yield this.sqlite.getUrl({database:this.dbName,readonly:this.readonly});return Promise.resolve(e)}catch(e){return Promise.reject(e)}})}getVersion(){return s(this,null,function*(){try{let e=yield this.sqlite.getVersion({database:this.dbName,readonly:this.readonly});return Promise.resolve(e)}catch(e){return Promise.reject(e)}})}getTableList(){return s(this,null,function*(){try{let e=yield this.sqlite.getTableList({database:this.dbName,readonly:this.readonly});return Promise.resolve(e)}catch(e){return Promise.reject(e)}})}execute(e,t=!0,r=!0){return s(this,null,function*(){try{if(this.readonly)return Promise.reject("not allowed in read-only mode");{let i=yield this.sqlite.execute({database:this.dbName,statements:e,transaction:t,readonly:!1,isSQL92:r});return Promise.resolve(i)}}catch(i){return Promise.reject(i)}})}query(e,t,r=!0){return s(this,null,function*(){let i;try{return t&&t.length>0?i=yield this.sqlite.query({database:this.dbName,statement:e,values:t,readonly:this.readonly,isSQL92:!0}):i=yield this.sqlite.query({database:this.dbName,statement:e,values:[],readonly:this.readonly,isSQL92:r}),i=yield this.reorderRows(i),Promise.resolve(i)}catch(n){return Promise.reject(n)}})}run(e,t,r=!0,i="no",n=!0){return s(this,null,function*(){let o;try{return this.readonly?Promise.reject("not allowed in read-only mode"):(t&&t.length>0?o=yield this.sqlite.run({database:this.dbName,statement:e,values:t,transaction:r,readonly:!1,returnMode:i,isSQL92:!0}):o=yield this.sqlite.run({database:this.dbName,statement:e,values:[],transaction:r,readonly:!1,returnMode:i,isSQL92:n}),o.changes=yield this.reorderRows(o.changes),Promise.resolve(o))}catch(a){return Promise.reject(a)}})}executeSet(e,t=!0,r="no",i=!0){return s(this,null,function*(){let n;try{return this.readonly?Promise.reject("not allowed in read-only mode"):(n=yield this.sqlite.executeSet({database:this.dbName,set:e,transaction:t,readonly:!1,returnMode:r,isSQL92:i}),n.changes=yield this.reorderRows(n.changes),Promise.resolve(n))}catch(o){return Promise.reject(o)}})}isExists(){return s(this,null,function*(){try{let e=yield this.sqlite.isDBExists({database:this.dbName,readonly:this.readonly});return Promise.resolve(e)}catch(e){return Promise.reject(e)}})}isTable(e){return s(this,null,function*(){try{let t=yield this.sqlite.isTableExists({database:this.dbName,table:e,readonly:this.readonly});return Promise.resolve(t)}catch(t){return Promise.reject(t)}})}isDBOpen(){return s(this,null,function*(){try{let e=yield this.sqlite.isDBOpen({database:this.dbName,readonly:this.readonly});return Promise.resolve(e)}catch(e){return Promise.reject(e)}})}delete(){return s(this,null,function*(){try{return this.readonly?Promise.reject("not allowed in read-only mode"):(yield this.sqlite.deleteDatabase({database:this.dbName,readonly:!1}),Promise.resolve())}catch(e){return Promise.reject(e)}})}createSyncTable(){return s(this,null,function*(){try{if(this.readonly)return Promise.reject("not allowed in read-only mode");{let e=yield this.sqlite.createSyncTable({database:this.dbName,readonly:!1});return Promise.resolve(e)}}catch(e){return Promise.reject(e)}})}setSyncDate(e){return s(this,null,function*(){try{return this.readonly?Promise.reject("not allowed in read-only mode"):(yield this.sqlite.setSyncDate({database:this.dbName,syncdate:e,readonly:!1}),Promise.resolve())}catch(t){return Promise.reject(t)}})}getSyncDate(){return s(this,null,function*(){try{let e=yield this.sqlite.getSyncDate({database:this.dbName,readonly:this.readonly}),t="";return e.syncDate>0&&(t=new Date(e.syncDate*1e3).toISOString()),Promise.resolve(t)}catch(e){return Promise.reject(e)}})}exportToJson(e,t=!1){return s(this,null,function*(){try{let r=yield this.sqlite.exportToJson({database:this.dbName,jsonexportmode:e,readonly:this.readonly,encrypted:t});return Promise.resolve(r)}catch(r){return Promise.reject(r)}})}deleteExportedRows(){return s(this,null,function*(){try{return this.readonly?Promise.reject("not allowed in read-only mode"):(yield this.sqlite.deleteExportedRows({database:this.dbName,readonly:!1}),Promise.resolve())}catch(e){return Promise.reject(e)}})}executeTransaction(e,t=!0){return s(this,null,function*(){let r=0,i=!1;if(this.readonly)return Promise.reject("not allowed in read-only mode");if(yield this.sqlite.beginTransaction({database:this.dbName}),i=yield this.sqlite.isTransactionActive({database:this.dbName}),!i)return Promise.reject("After Begin Transaction, no transaction active");try{for(let a of e){if(typeof a!="object"||!("statement"in a))throw new Error("Error a task.statement must be provided");if("values"in a&&a.values&&a.values.length>0){let c=a.statement.toUpperCase().includes("RETURNING")?"all":"no",y=yield this.sqlite.run({database:this.dbName,statement:a.statement,values:a.values,transaction:!1,readonly:!1,returnMode:c,isSQL92:t});if(y.changes.changes<0)throw new Error("Error in transaction method run ");r+=y.changes.changes}else{let c=yield this.sqlite.execute({database:this.dbName,statements:a.statement,transaction:!1,readonly:!1});if(c.changes.changes<0)throw new Error("Error in transaction method execute ");r+=c.changes.changes}}let n=yield this.sqlite.commitTransaction({database:this.dbName});r+=n.changes.changes;let o={changes:{changes:r}};return Promise.resolve(o)}catch(n){let o=n.message?n.message:n;return yield this.sqlite.rollbackTransaction({database:this.dbName}),Promise.reject(o)}})}reorderRows(e){return s(this,null,function*(){let t=e;if(e!=null&&e.values&&typeof e.values[0]=="object"&&Object.keys(e.values[0]).includes("ios_columns")){let r=e.values[0].ios_columns,i=[];for(let n=1;n<e.values.length;n++){let o=e.values[n],a={};for(let c of r)a[c]=o[c];i.push(a)}t.values=i}return Promise.resolve(t)})}};var v=b("CapacitorSQLite",{web:()=>import("./chunk-WVLPTXZK.js").then(l=>new l.CapacitorSQLiteWeb),electron:()=>window.CapacitorCustomPlatform.plugins.CapacitorSQLite});var m="myuserdb",R=(()=>{let e=class e{constructor(r){this.platform=r,this.sqlite=new h(v),this.usersSignal=w([])}initializPlugin(){return s(this,null,function*(){try{return yield this.platform.ready(),(yield this.sqlite.isConnection(m,!1)).result?this.db=yield this.sqlite.retrieveConnection(m,!1):(this.db=yield this.sqlite.createConnection(m,!1,"no-encryption",1,!1),yield this.db.open()),yield this.db.execute(`
        CREATE TABLE IF NOT EXISTS users (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          name TEXT,
          email TEXT UNIQUE,
          password TEXT,
          repeatpassword TEXT
        );
      `),yield this.loadUsers(),console.log("[SQLite] Plugin inicializado com sucesso."),!0}catch(r){throw console.error("[SQLite] Erro ao inicializar o plugin:",r),r}})}loadUsers(){return s(this,null,function*(){try{let r=yield this.db.query("SELECT * FROM users");this.usersSignal.set(r.values||[])}catch(r){console.error("[SQLite] Erro ao carregar usu\xE1rios:",r)}})}addUser(r,i,n,o){return s(this,null,function*(){try{return(yield this.userExists(i))?(alert("Este e-mail j\xE1 est\xE1 cadastrado."),!1):(yield this.db.run(`
        INSERT INTO users (name, email, password, repeatpassword)
        VALUES (?, ?, ?, ?)
      `,[r,i,n,o]),yield this.loadUsers(),!0)}catch(a){return console.error("[SQLite] Erro ao adicionar usu\xE1rio:",a),alert("Erro ao salvar usu\xE1rio: "+JSON.stringify(a)),!1}})}userExists(r){return s(this,null,function*(){var n;return(((n=(yield this.db.query("SELECT * FROM users WHERE email = ?",[r])).values)==null?void 0:n.length)||0)>0})}validateUser(r,i){return s(this,null,function*(){var n;try{return(((n=(yield this.db.query("SELECT * FROM users WHERE email = ? AND password = ?",[r,i])).values)==null?void 0:n.length)||0)>0}catch(o){return console.error("[SQLite] Erro ao validar login:",o),!1}})}getAllUsers(){return s(this,null,function*(){return(yield this.db.query("SELECT * FROM users")).values||[]})}updateUserById(r,i){return s(this,null,function*(){let o=yield this.db.run("UPDATE users SET password = ? WHERE id = ?",[i,r]);return yield this.loadUsers(),o})}deleteUserById(r){return s(this,null,function*(){let n=yield this.db.run("DELETE FROM users WHERE id = ?",[r]);return yield this.loadUsers(),n})}};e.\u0275fac=function(i){return new(i||e)(P(f))},e.\u0275prov=d({token:e,factory:e.\u0275fac,providedIn:"root"});let l=e;return l})();export{R as a};
