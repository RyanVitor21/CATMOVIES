{
  "version": 3,
  "sources": ["../../../../../../node_modules/@awesome-cordova-plugins/sqlite/ngx/index.js"],
  "sourcesContent": ["import { __decorate, __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AwesomeCordovaNativePlugin, cordova, checkAvailability, cordovaInstance, instancePropertyGet, instancePropertySet } from '@awesome-cordova-plugins/core';\nimport * as i0 from \"@angular/core\";\nvar SQLiteObject = /** @class */function () {\n  function SQLiteObject(_objectInstance) {\n    this._objectInstance = _objectInstance;\n  }\n  SQLiteObject.prototype.addTransaction = function (transaction) {\n    return cordovaInstance(this, \"addTransaction\", {\n      \"sync\": true\n    }, arguments);\n  };\n  SQLiteObject.prototype.transaction = function (fn) {\n    return cordovaInstance(this, \"transaction\", {\n      \"successIndex\": 2,\n      \"errorIndex\": 1\n    }, arguments);\n  };\n  SQLiteObject.prototype.readTransaction = function (fn) {\n    return cordovaInstance(this, \"readTransaction\", {}, arguments);\n  };\n  SQLiteObject.prototype.startNextTransaction = function () {\n    return cordovaInstance(this, \"startNextTransaction\", {\n      \"sync\": true\n    }, arguments);\n  };\n  SQLiteObject.prototype.open = function () {\n    return cordovaInstance(this, \"open\", {}, arguments);\n  };\n  SQLiteObject.prototype.close = function () {\n    return cordovaInstance(this, \"close\", {}, arguments);\n  };\n  SQLiteObject.prototype.executeSql = function (statement, params) {\n    return cordovaInstance(this, \"executeSql\", {}, arguments);\n  };\n  SQLiteObject.prototype.sqlBatch = function (sqlStatements) {\n    return cordovaInstance(this, \"sqlBatch\", {}, arguments);\n  };\n  SQLiteObject.prototype.abortallPendingTransactions = function () {\n    return cordovaInstance(this, \"abortallPendingTransactions\", {\n      \"sync\": true\n    }, arguments);\n  };\n  Object.defineProperty(SQLiteObject.prototype, \"databaseFeatures\", {\n    get: function () {\n      return instancePropertyGet(this, \"databaseFeatures\");\n    },\n    set: function (value) {\n      instancePropertySet(this, \"databaseFeatures\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SQLiteObject.prototype, \"openDBs\", {\n    get: function () {\n      return instancePropertyGet(this, \"openDBs\");\n    },\n    set: function (value) {\n      instancePropertySet(this, \"openDBs\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return SQLiteObject;\n}();\nexport { SQLiteObject };\nvar SQLite = /** @class */function (_super) {\n  __extends(SQLite, _super);\n  function SQLite() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  SQLite.prototype.create = function (config) {\n    var _this = this;\n    return function () {\n      if (checkAvailability(_this) === true) {\n        return new Promise(function (resolve, reject) {\n          sqlitePlugin.openDatabase(config, function (db) {\n            return resolve(new SQLiteObject(db));\n          }, reject);\n        });\n      }\n    }();\n  };\n  SQLite.prototype.echoTest = function () {\n    return cordova(this, \"echoTest\", {}, arguments);\n  };\n  SQLite.prototype.selfTest = function () {\n    return cordova(this, \"selfTest\", {}, arguments);\n  };\n  SQLite.prototype.deleteDatabase = function (config) {\n    return cordova(this, \"deleteDatabase\", {}, arguments);\n  };\n  SQLite.ɵfac = /* @__PURE__ */(() => {\n    let ɵSQLite_BaseFactory;\n    return function SQLite_Factory(__ngFactoryType__) {\n      return (ɵSQLite_BaseFactory || (ɵSQLite_BaseFactory = i0.ɵɵgetInheritedFactory(SQLite)))(__ngFactoryType__ || SQLite);\n    };\n  })();\n  SQLite.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SQLite,\n    factory: SQLite.ɵfac\n  });\n  SQLite.pluginName = \"SQLite\";\n  SQLite.pluginRef = \"sqlitePlugin\";\n  SQLite.plugin = \"cordova-sqlite-storage\";\n  SQLite.repo = \"https://github.com/litehelpers/Cordova-sqlite-storage\";\n  SQLite.platforms = [\"Android\", \"iOS\", \"macOS\", \"Windows\"];\n  SQLite = __decorate([], SQLite);\n  return SQLite;\n}(AwesomeCordovaNativePlugin);\nexport { SQLite };\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SQLite, [{\n    type: Injectable\n  }], null, {\n    create: [],\n    echoTest: [],\n    selfTest: [],\n    deleteDatabase: []\n  });\n})();\n"],
  "mappings": "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",
  "names": ["SQLiteObject", "SQLite"]
}
