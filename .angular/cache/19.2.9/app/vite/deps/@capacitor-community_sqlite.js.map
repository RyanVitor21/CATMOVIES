{
  "version": 3,
  "sources": ["../../../../../../node_modules/@capacitor-community/sqlite/dist/esm/definitions.js", "../../../../../../node_modules/@capacitor-community/sqlite/dist/esm/index.js"],
  "sourcesContent": ["//import { Capacitor } from '@capacitor/core';\n/**\n * SQLiteConnection Class\n */\nexport class SQLiteConnection {\n  constructor(sqlite) {\n    this.sqlite = sqlite;\n    this._connectionDict = new Map();\n  }\n  async initWebStore() {\n    try {\n      await this.sqlite.initWebStore();\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async saveToStore(database) {\n    try {\n      await this.sqlite.saveToStore({\n        database\n      });\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async saveToLocalDisk(database) {\n    try {\n      await this.sqlite.saveToLocalDisk({\n        database\n      });\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async getFromLocalDiskToStore(overwrite) {\n    const mOverwrite = overwrite != null ? overwrite : true;\n    try {\n      await this.sqlite.getFromLocalDiskToStore({\n        overwrite: mOverwrite\n      });\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async echo(value) {\n    try {\n      const res = await this.sqlite.echo({\n        value\n      });\n      return Promise.resolve(res);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async isSecretStored() {\n    try {\n      const res = await this.sqlite.isSecretStored();\n      return Promise.resolve(res);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async setEncryptionSecret(passphrase) {\n    try {\n      await this.sqlite.setEncryptionSecret({\n        passphrase: passphrase\n      });\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async changeEncryptionSecret(passphrase, oldpassphrase) {\n    try {\n      await this.sqlite.changeEncryptionSecret({\n        passphrase: passphrase,\n        oldpassphrase: oldpassphrase\n      });\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async clearEncryptionSecret() {\n    try {\n      await this.sqlite.clearEncryptionSecret();\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async checkEncryptionSecret(passphrase) {\n    try {\n      const res = await this.sqlite.checkEncryptionSecret({\n        passphrase: passphrase\n      });\n      return Promise.resolve(res);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async addUpgradeStatement(database, upgrade) {\n    try {\n      if (database.endsWith('.db')) database = database.slice(0, -3);\n      await this.sqlite.addUpgradeStatement({\n        database,\n        upgrade\n      });\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async createConnection(database, encrypted, mode, version, readonly) {\n    try {\n      if (database.endsWith('.db')) database = database.slice(0, -3);\n      await this.sqlite.createConnection({\n        database,\n        encrypted,\n        mode,\n        version,\n        readonly\n      });\n      const conn = new SQLiteDBConnection(database, readonly, this.sqlite);\n      const connName = readonly ? `RO_${database}` : `RW_${database}`;\n      this._connectionDict.set(connName, conn);\n      /*\n      console.log(`*** in createConnection connectionDict: ***`)\n      this._connectionDict.forEach((connection, key) => {\n        console.log(`Key: ${key}, Value: ${connection}`);\n      });\n      */\n      return Promise.resolve(conn);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async closeConnection(database, readonly) {\n    try {\n      if (database.endsWith('.db')) database = database.slice(0, -3);\n      await this.sqlite.closeConnection({\n        database,\n        readonly\n      });\n      const connName = readonly ? `RO_${database}` : `RW_${database}`;\n      this._connectionDict.delete(connName);\n      /*      console.log(`*** in closeConnection connectionDict: ***`)\n      this._connectionDict.forEach((connection, key) => {\n        console.log(`Key: ${key}, Value: ${connection}`);\n      });\n      */\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async isConnection(database, readonly) {\n    const res = {};\n    if (database.endsWith('.db')) database = database.slice(0, -3);\n    const connName = readonly ? `RO_${database}` : `RW_${database}`;\n    res.result = this._connectionDict.has(connName);\n    return Promise.resolve(res);\n  }\n  async retrieveConnection(database, readonly) {\n    if (database.endsWith('.db')) database = database.slice(0, -3);\n    const connName = readonly ? `RO_${database}` : `RW_${database}`;\n    if (this._connectionDict.has(connName)) {\n      const conn = this._connectionDict.get(connName);\n      if (typeof conn != 'undefined') return Promise.resolve(conn);else {\n        return Promise.reject(`Connection ${database} is undefined`);\n      }\n    } else {\n      return Promise.reject(`Connection ${database} does not exist`);\n    }\n  }\n  async getNCDatabasePath(path, database) {\n    try {\n      const databasePath = await this.sqlite.getNCDatabasePath({\n        path,\n        database\n      });\n      return Promise.resolve(databasePath);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async createNCConnection(databasePath, version) {\n    try {\n      await this.sqlite.createNCConnection({\n        databasePath,\n        version\n      });\n      const conn = new SQLiteDBConnection(databasePath, true, this.sqlite);\n      const connName = `RO_${databasePath})`;\n      this._connectionDict.set(connName, conn);\n      return Promise.resolve(conn);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async closeNCConnection(databasePath) {\n    try {\n      await this.sqlite.closeNCConnection({\n        databasePath\n      });\n      const connName = `RO_${databasePath})`;\n      this._connectionDict.delete(connName);\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async isNCConnection(databasePath) {\n    const res = {};\n    const connName = `RO_${databasePath})`;\n    res.result = this._connectionDict.has(connName);\n    return Promise.resolve(res);\n  }\n  async retrieveNCConnection(databasePath) {\n    if (this._connectionDict.has(databasePath)) {\n      const connName = `RO_${databasePath})`;\n      const conn = this._connectionDict.get(connName);\n      if (typeof conn != 'undefined') return Promise.resolve(conn);else {\n        return Promise.reject(`Connection ${databasePath} is undefined`);\n      }\n    } else {\n      return Promise.reject(`Connection ${databasePath} does not exist`);\n    }\n  }\n  async isNCDatabase(databasePath) {\n    try {\n      const res = await this.sqlite.isNCDatabase({\n        databasePath\n      });\n      return Promise.resolve(res);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async retrieveAllConnections() {\n    return this._connectionDict;\n  }\n  async closeAllConnections() {\n    const delDict = new Map();\n    try {\n      /*      console.log(`*** in closeAllConnections connectionDict: ***`)\n      this._connectionDict.forEach((connection, key) => {\n        console.log(`Key: ${key}, Value: ${connection}`);\n      });\n      */\n      for (const key of this._connectionDict.keys()) {\n        const database = key.substring(3);\n        const readonly = key.substring(0, 3) === 'RO_' ? true : false;\n        await this.sqlite.closeConnection({\n          database,\n          readonly\n        });\n        delDict.set(key, null);\n      }\n      for (const key of delDict.keys()) {\n        this._connectionDict.delete(key);\n      }\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async checkConnectionsConsistency() {\n    try {\n      const keys = [...this._connectionDict.keys()];\n      const openModes = [];\n      const dbNames = [];\n      for (const key of keys) {\n        openModes.push(key.substring(0, 2));\n        dbNames.push(key.substring(3));\n      }\n      const res = await this.sqlite.checkConnectionsConsistency({\n        dbNames: dbNames,\n        openModes: openModes\n      });\n      if (!res.result) this._connectionDict = new Map();\n      return Promise.resolve(res);\n    } catch (err) {\n      this._connectionDict = new Map();\n      return Promise.reject(err);\n    }\n  }\n  async importFromJson(jsonstring) {\n    try {\n      const ret = await this.sqlite.importFromJson({\n        jsonstring: jsonstring\n      });\n      return Promise.resolve(ret);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async isJsonValid(jsonstring) {\n    try {\n      const ret = await this.sqlite.isJsonValid({\n        jsonstring: jsonstring\n      });\n      return Promise.resolve(ret);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async copyFromAssets(overwrite) {\n    const mOverwrite = overwrite != null ? overwrite : true;\n    try {\n      await this.sqlite.copyFromAssets({\n        overwrite: mOverwrite\n      });\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async getFromHTTPRequest(url, overwrite) {\n    const mOverwrite = overwrite != null ? overwrite : true;\n    try {\n      await this.sqlite.getFromHTTPRequest({\n        url,\n        overwrite: mOverwrite\n      });\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async isDatabaseEncrypted(database) {\n    if (database.endsWith('.db')) database = database.slice(0, -3);\n    try {\n      const res = await this.sqlite.isDatabaseEncrypted({\n        database: database\n      });\n      return Promise.resolve(res);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async isInConfigEncryption() {\n    try {\n      const res = await this.sqlite.isInConfigEncryption();\n      return Promise.resolve(res);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async isInConfigBiometricAuth() {\n    try {\n      const res = await this.sqlite.isInConfigBiometricAuth();\n      return Promise.resolve(res);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async isDatabase(database) {\n    if (database.endsWith('.db')) database = database.slice(0, -3);\n    try {\n      const res = await this.sqlite.isDatabase({\n        database: database\n      });\n      return Promise.resolve(res);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async getDatabaseList() {\n    try {\n      const res = await this.sqlite.getDatabaseList();\n      const values = res.values;\n      values.sort();\n      const ret = {\n        values: values\n      };\n      return Promise.resolve(ret);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async getMigratableDbList(folderPath) {\n    const path = folderPath ? folderPath : 'default';\n    try {\n      const res = await this.sqlite.getMigratableDbList({\n        folderPath: path\n      });\n      return Promise.resolve(res);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async addSQLiteSuffix(folderPath, dbNameList) {\n    const path = folderPath ? folderPath : 'default';\n    const dbList = dbNameList ? dbNameList : [];\n    try {\n      const res = await this.sqlite.addSQLiteSuffix({\n        folderPath: path,\n        dbNameList: dbList\n      });\n      return Promise.resolve(res);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async deleteOldDatabases(folderPath, dbNameList) {\n    const path = folderPath ? folderPath : 'default';\n    const dbList = dbNameList ? dbNameList : [];\n    try {\n      const res = await this.sqlite.deleteOldDatabases({\n        folderPath: path,\n        dbNameList: dbList\n      });\n      return Promise.resolve(res);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async moveDatabasesAndAddSuffix(folderPath, dbNameList) {\n    const path = folderPath ? folderPath : 'default';\n    const dbList = dbNameList ? dbNameList : [];\n    return this.sqlite.moveDatabasesAndAddSuffix({\n      folderPath: path,\n      dbNameList: dbList\n    });\n  }\n}\n/**\n * SQLiteDBConnection Class\n */\nexport class SQLiteDBConnection {\n  constructor(dbName, readonly, sqlite) {\n    this.dbName = dbName;\n    this.readonly = readonly;\n    this.sqlite = sqlite;\n  }\n  getConnectionDBName() {\n    return this.dbName;\n  }\n  getConnectionReadOnly() {\n    return this.readonly;\n  }\n  async open() {\n    try {\n      await this.sqlite.open({\n        database: this.dbName,\n        readonly: this.readonly\n      });\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async close() {\n    try {\n      await this.sqlite.close({\n        database: this.dbName,\n        readonly: this.readonly\n      });\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async beginTransaction() {\n    try {\n      const changes = await this.sqlite.beginTransaction({\n        database: this.dbName\n      });\n      return Promise.resolve(changes);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async commitTransaction() {\n    try {\n      const changes = await this.sqlite.commitTransaction({\n        database: this.dbName\n      });\n      return Promise.resolve(changes);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async rollbackTransaction() {\n    try {\n      const changes = await this.sqlite.rollbackTransaction({\n        database: this.dbName\n      });\n      return Promise.resolve(changes);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async isTransactionActive() {\n    try {\n      const result = await this.sqlite.isTransactionActive({\n        database: this.dbName\n      });\n      return Promise.resolve(result);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async loadExtension(path) {\n    try {\n      await this.sqlite.loadExtension({\n        database: this.dbName,\n        path: path,\n        readonly: this.readonly\n      });\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async enableLoadExtension(toggle) {\n    try {\n      await this.sqlite.enableLoadExtension({\n        database: this.dbName,\n        toggle: toggle,\n        readonly: this.readonly\n      });\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async getUrl() {\n    try {\n      const res = await this.sqlite.getUrl({\n        database: this.dbName,\n        readonly: this.readonly\n      });\n      return Promise.resolve(res);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async getVersion() {\n    try {\n      const version = await this.sqlite.getVersion({\n        database: this.dbName,\n        readonly: this.readonly\n      });\n      return Promise.resolve(version);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async getTableList() {\n    try {\n      const res = await this.sqlite.getTableList({\n        database: this.dbName,\n        readonly: this.readonly\n      });\n      return Promise.resolve(res);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async execute(statements, transaction = true, isSQL92 = true) {\n    try {\n      if (!this.readonly) {\n        const res = await this.sqlite.execute({\n          database: this.dbName,\n          statements: statements,\n          transaction: transaction,\n          readonly: false,\n          isSQL92: isSQL92\n        });\n        return Promise.resolve(res);\n      } else {\n        return Promise.reject('not allowed in read-only mode');\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async query(statement, values, isSQL92 = true) {\n    let res;\n    try {\n      if (values && values.length > 0) {\n        res = await this.sqlite.query({\n          database: this.dbName,\n          statement: statement,\n          values: values,\n          readonly: this.readonly,\n          isSQL92: true\n        });\n      } else {\n        res = await this.sqlite.query({\n          database: this.dbName,\n          statement: statement,\n          values: [],\n          readonly: this.readonly,\n          isSQL92: isSQL92\n        });\n      }\n      // reorder rows for ios\n      res = await this.reorderRows(res);\n      return Promise.resolve(res);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async run(statement, values, transaction = true, returnMode = 'no', isSQL92 = true) {\n    let res;\n    try {\n      if (!this.readonly) {\n        if (values && values.length > 0) {\n          res = await this.sqlite.run({\n            database: this.dbName,\n            statement: statement,\n            values: values,\n            transaction: transaction,\n            readonly: false,\n            returnMode: returnMode,\n            isSQL92: true\n          });\n        } else {\n          res = await this.sqlite.run({\n            database: this.dbName,\n            statement: statement,\n            values: [],\n            transaction: transaction,\n            readonly: false,\n            returnMode: returnMode,\n            isSQL92: isSQL92\n          });\n        }\n        // reorder rows for ios\n        res.changes = await this.reorderRows(res.changes);\n        return Promise.resolve(res);\n      } else {\n        return Promise.reject('not allowed in read-only mode');\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async executeSet(set, transaction = true, returnMode = 'no', isSQL92 = true) {\n    let res;\n    try {\n      if (!this.readonly) {\n        res = await this.sqlite.executeSet({\n          database: this.dbName,\n          set: set,\n          transaction: transaction,\n          readonly: false,\n          returnMode: returnMode,\n          isSQL92: isSQL92\n        });\n        //      }\n        // reorder rows for ios\n        res.changes = await this.reorderRows(res.changes);\n        return Promise.resolve(res);\n      } else {\n        return Promise.reject('not allowed in read-only mode');\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async isExists() {\n    try {\n      const res = await this.sqlite.isDBExists({\n        database: this.dbName,\n        readonly: this.readonly\n      });\n      return Promise.resolve(res);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async isTable(table) {\n    try {\n      const res = await this.sqlite.isTableExists({\n        database: this.dbName,\n        table: table,\n        readonly: this.readonly\n      });\n      return Promise.resolve(res);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async isDBOpen() {\n    try {\n      const res = await this.sqlite.isDBOpen({\n        database: this.dbName,\n        readonly: this.readonly\n      });\n      return Promise.resolve(res);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async delete() {\n    try {\n      if (!this.readonly) {\n        await this.sqlite.deleteDatabase({\n          database: this.dbName,\n          readonly: false\n        });\n        return Promise.resolve();\n      } else {\n        return Promise.reject('not allowed in read-only mode');\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async createSyncTable() {\n    try {\n      if (!this.readonly) {\n        const res = await this.sqlite.createSyncTable({\n          database: this.dbName,\n          readonly: false\n        });\n        return Promise.resolve(res);\n      } else {\n        return Promise.reject('not allowed in read-only mode');\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async setSyncDate(syncdate) {\n    try {\n      if (!this.readonly) {\n        await this.sqlite.setSyncDate({\n          database: this.dbName,\n          syncdate: syncdate,\n          readonly: false\n        });\n        return Promise.resolve();\n      } else {\n        return Promise.reject('not allowed in read-only mode');\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async getSyncDate() {\n    try {\n      const res = await this.sqlite.getSyncDate({\n        database: this.dbName,\n        readonly: this.readonly\n      });\n      let retDate = '';\n      if (res.syncDate > 0) retDate = new Date(res.syncDate * 1000).toISOString();\n      return Promise.resolve(retDate);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async exportToJson(mode, encrypted = false) {\n    try {\n      const res = await this.sqlite.exportToJson({\n        database: this.dbName,\n        jsonexportmode: mode,\n        readonly: this.readonly,\n        encrypted: encrypted\n      });\n      return Promise.resolve(res);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async deleteExportedRows() {\n    try {\n      if (!this.readonly) {\n        await this.sqlite.deleteExportedRows({\n          database: this.dbName,\n          readonly: false\n        });\n        return Promise.resolve();\n      } else {\n        return Promise.reject('not allowed in read-only mode');\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  async executeTransaction(txn, isSQL92 = true) {\n    let changes = 0;\n    let isActive = false;\n    if (!this.readonly) {\n      await this.sqlite.beginTransaction({\n        database: this.dbName\n      });\n      isActive = await this.sqlite.isTransactionActive({\n        database: this.dbName\n      });\n      if (!isActive) {\n        return Promise.reject('After Begin Transaction, no transaction active');\n      }\n      try {\n        for (const task of txn) {\n          if (typeof task !== 'object' || !('statement' in task)) {\n            throw new Error('Error a task.statement must be provided');\n          }\n          if ('values' in task && task.values && task.values.length > 0) {\n            const retMode = task.statement.toUpperCase().includes('RETURNING') ? 'all' : 'no';\n            const ret = await this.sqlite.run({\n              database: this.dbName,\n              statement: task.statement,\n              values: task.values,\n              transaction: false,\n              readonly: false,\n              returnMode: retMode,\n              isSQL92: isSQL92\n            });\n            if (ret.changes.changes < 0) {\n              throw new Error('Error in transaction method run ');\n            }\n            changes += ret.changes.changes;\n          } else {\n            const ret = await this.sqlite.execute({\n              database: this.dbName,\n              statements: task.statement,\n              transaction: false,\n              readonly: false\n            });\n            if (ret.changes.changes < 0) {\n              throw new Error('Error in transaction method execute ');\n            }\n            changes += ret.changes.changes;\n          }\n        }\n        // commit\n        const retC = await this.sqlite.commitTransaction({\n          database: this.dbName\n        });\n        changes += retC.changes.changes;\n        const retChanges = {\n          changes: {\n            changes: changes\n          }\n        };\n        return Promise.resolve(retChanges);\n      } catch (err) {\n        // rollback\n        const msg = err.message ? err.message : err;\n        await this.sqlite.rollbackTransaction({\n          database: this.dbName\n        });\n        return Promise.reject(msg);\n      }\n    } else {\n      return Promise.reject('not allowed in read-only mode');\n    }\n  }\n  async reorderRows(res) {\n    const retRes = res;\n    if (res?.values && typeof res.values[0] === 'object') {\n      if (Object.keys(res.values[0]).includes('ios_columns')) {\n        const columnList = res.values[0]['ios_columns'];\n        const iosRes = [];\n        for (let i = 1; i < res.values.length; i++) {\n          const rowJson = res.values[i];\n          const resRowJson = {};\n          for (const item of columnList) {\n            resRowJson[item] = rowJson[item];\n          }\n          iosRes.push(resRowJson);\n        }\n        retRes['values'] = iosRes;\n      }\n    }\n    return Promise.resolve(retRes);\n  }\n}\n", "import { registerPlugin } from '@capacitor/core';\nconst CapacitorSQLite = registerPlugin('CapacitorSQLite', {\n  web: () => import('./web').then(m => new m.CapacitorSQLiteWeb()),\n  electron: () => window.CapacitorCustomPlatform.plugins.CapacitorSQLite\n});\nexport { CapacitorSQLite };\nexport * from './definitions';\n"],
  "mappings": "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",
  "names": []
}
